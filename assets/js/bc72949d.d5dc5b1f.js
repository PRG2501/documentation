"use strict";(self.webpackChunkprg_2501=self.webpackChunkprg_2501||[]).push([[893],{964:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"tutorial/Classes","title":"JavaScript Classes","description":"Classes in JavaScript are templates for creating objects. They encapsulate data and behavior into a single unit, making it easier to create multiple objects with the same structure and functionality. Classes provide a cleaner and more organized way to create objects compared to other methods.","source":"@site/docs/tutorial/3_Classes.md","sourceDirName":"tutorial","slug":"/tutorial/Classes","permalink":"/documentation/docs/tutorial/Classes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/3_Classes.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Functions","permalink":"/documentation/docs/tutorial/Functions"},"next":{"title":"Promises in JavaScript","permalink":"/documentation/docs/tutorial/Promises"}}');var a=t(4848),r=t(8453);const o={},i="JavaScript Classes",c={},l=[{value:"Constructor",id:"constructor",level:2},{value:"The <code>this</code> Keyword",id:"the-this-keyword",level:2},{value:"Creating Instances",id:"creating-instances",level:2},{value:"Getters and Setters",id:"getters-and-setters",level:2},{value:"Getters",id:"getters",level:3},{value:"Setters",id:"setters",level:3},{value:"Using Getters and Setters",id:"using-getters-and-setters",level:3}];function d(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"javascript-classes",children:"JavaScript Classes"})}),"\n",(0,a.jsx)(s.p,{children:"Classes in JavaScript are templates for creating objects. They encapsulate data and behavior into a single unit, making it easier to create multiple objects with the same structure and functionality. Classes provide a cleaner and more organized way to create objects compared to other methods."}),"\n",(0,a.jsx)(s.h2,{id:"constructor",children:"Constructor"}),"\n",(0,a.jsx)(s.p,{children:"The constructor is a special method that gets called when creating a new instance of a class. It's used to initialize object properties."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-javascript",children:"class Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n}\n"})}),"\n",(0,a.jsxs)(s.h2,{id:"the-this-keyword",children:["The ",(0,a.jsx)(s.code,{children:"this"})," Keyword"]}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"this"})," keyword refers to the current instance of the class (the object that gets created using the template). It's used to access and modify instance properties and methods."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-javascript",children:"class Person {\n  constructor(name) {\n    this.name = name;\n  }\n\n  sayHello() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n}\n"})}),"\n",(0,a.jsx)(s.h2,{id:"creating-instances",children:"Creating Instances"}),"\n",(0,a.jsxs)(s.p,{children:["To create a new instance of a class, use the ",(0,a.jsx)(s.code,{children:"new"})," keyword followed by the class name and any arguments for the constructor."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-javascript",children:'const person = new Person("Chaim", 30);\nconsole.log(person.name); // prints "Chaim"\nperson.sayHello(); // prints "Hello, my name is Chaim"\n'})}),"\n",(0,a.jsx)(s.h2,{id:"getters-and-setters",children:"Getters and Setters"}),"\n",(0,a.jsx)(s.p,{children:"Getters and setters are special methods that allow you to define how properties are accessed and modified."}),"\n",(0,a.jsx)(s.h3,{id:"getters",children:"Getters"}),"\n",(0,a.jsxs)(s.p,{children:["Getters are used to retrieve property values. They are defined using the ",(0,a.jsx)(s.code,{children:"get"})," keyword."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-javascript",children:'class Person {\n  constructor(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\nconst person = new Person("Yakov", "Weiss");\nconsole.log(person.fullName); // prints "Yakov Weiss"\n'})}),"\n",(0,a.jsx)(s.h3,{id:"setters",children:"Setters"}),"\n",(0,a.jsxs)(s.p,{children:["Setters are used to modify property values. They are defined using the ",(0,a.jsx)(s.code,{children:"set"})," keyword."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-javascript",children:'class Person {\n  constructor(age) {\n    this._age = age; // Convention: prefix private properties with _\n  }\n\n  set age(value) {\n    if (value >= 0) {\n      this._age = value;\n    } else {\n      console.log("Age can\'t be negative");\n    }\n  }\n\n  get age() {\n    return this._age;\n  }\n}\n\nconst person = new Person(22);\nperson.age; // 22\nperson.age = 25;\nperson.age = 30; // will print "Age can\'t be negative", age will remain 25\n'})}),"\n",(0,a.jsx)(s.h3,{id:"using-getters-and-setters",children:"Using Getters and Setters"}),"\n",(0,a.jsx)(s.p,{children:"Getters and setters are accessed like regular properties, not methods:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-javascript",children:'const person = new Person("John", "Doe");\nconsole.log(person.fullName); // "John Doe"\n\nconst person2 = new Person(25);\nperson2.age = 30; // Using setter\nconsole.log(person2.age); // 30 (using getter)\n'})})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>i});var n=t(6540);const a={},r=n.createContext(a);function o(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);