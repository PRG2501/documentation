"use strict";(self.webpackChunkprg_2501=self.webpackChunkprg_2501||[]).push([[42],{8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(6540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},8800:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"tutorial/Promises","title":"Promises in JavaScript","description":"A Promise is like a special container that holds a value that might not be available right away. Think of it like ordering food at a restaurant - you place your order (start an operation) and get a receipt (Promise) that says your food will be ready soon. The food isn\'t ready immediately, but you have a way to know when it will be.","source":"@site/docs/tutorial/4_Promises.md","sourceDirName":"tutorial","slug":"/tutorial/Promises","permalink":"/documentation/docs/tutorial/Promises","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/4_Promises.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"JavaScript Classes","permalink":"/documentation/docs/tutorial/Classes"}}');var t=s(4848),r=s(8453);const o={},a="Promises in JavaScript",l={},c=[{value:"Basic Promise Structure",id:"basic-promise-structure",level:2},{value:"Using Promises with .then()",id:"using-promises-with-then",level:2},{value:"Real-World Example",id:"real-world-example",level:2},{value:"Understanding Chained .then() Calls",id:"understanding-chained-then-calls",level:3},{value:"Key Points to Remember",id:"key-points-to-remember",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"promises-in-javascript",children:"Promises in JavaScript"})}),"\n",(0,t.jsx)(n.p,{children:"A Promise is like a special container that holds a value that might not be available right away. Think of it like ordering food at a restaurant - you place your order (start an operation) and get a receipt (Promise) that says your food will be ready soon. The food isn't ready immediately, but you have a way to know when it will be."}),"\n",(0,t.jsx)(n.h2,{id:"basic-promise-structure",children:"Basic Promise Structure"}),"\n",(0,t.jsx)(n.p,{children:"A Promise can be in one of three states:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pending"}),": The initial state (like waiting for your food)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fulfilled"}),": The operation completed successfully (your food is ready!)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rejected"}),": The operation failed (sorry, we're out of that dish)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"using-promises-with-then",children:"Using Promises with .then()"}),"\n",(0,t.jsxs)(n.p,{children:["The most basic way to use a Promise is with the ",(0,t.jsx)(n.code,{children:".then()"})," method. Here's a simple example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Create a simple Promise\nconst myPromise = new Promise((resolve, reject) => {\n  // This is where you do something that takes time\n  setTimeout(() => {\n    resolve("Hello!"); // Success!\n    // or\n    // reject("Oops!"); // Error!\n  }, 1000);\n});\n\n// Use the Promise\nmyPromise.then((result) => {\n  console.log(result); // Will print "Hello!" after 1 second\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"real-world-example",children:"Real-World Example"}),"\n",(0,t.jsx)(n.p,{children:"Here's a practical example using the icanhazdadjoke API to fetch a random dad joke:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Fetch a dad joke from the API\nfetch("https://icanhazdadjoke.com/", {\n  headers: {\n    Accept: "text/plain", // we will explain what headers are in a later class\n  },\n})\n  .then((response) => response.text())\n  .then((joke) => {\n    console.log("Here\'s your dad joke:", joke);\n  });\n'})}),"\n",(0,t.jsx)(n.h3,{id:"understanding-chained-then-calls",children:"Understanding Chained .then() Calls"}),"\n",(0,t.jsxs)(n.p,{children:["In the example above, we use two ",(0,t.jsx)(n.code,{children:".then()"})," calls in a chain. Here's how it works:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The first ",(0,t.jsx)(n.code,{children:".then()"})," receives the response from the server:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:".then((response) => response.text())\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"This gets the raw response from the server"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"response.text()"})," converts the response into plain text"]}),"\n",(0,t.jsx)(n.li,{children:"This returns a new Promise with the text content"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The second ",(0,t.jsx)(n.code,{children:".then()"})," receives the text content:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'.then((joke) => {\n  console.log("Here\'s your dad joke:", joke);\n});\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"This receives the text content from the previous step"}),"\n",(0,t.jsx)(n.li,{children:"Now we can use the joke text as we want"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Each ",(0,t.jsx)(n.code,{children:".then()"})," call:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Waits for the previous Promise to complete"}),"\n",(0,t.jsx)(n.li,{children:"Receives the result from the previous step"}),"\n",(0,t.jsx)(n.li,{children:"Can return a new value (which becomes a new Promise)"}),"\n",(0,t.jsx)(n.li,{children:"Or just performs an action without returning anything"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"key-points-to-remember",children:"Key Points to Remember"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Promises help you handle operations that take time to complete"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:".then()"})," is used to handle the successful result of a Promise"]}),"\n",(0,t.jsxs)(n.li,{children:["The code inside ",(0,t.jsx)(n.code,{children:".then()"})," only runs after the Promise is fulfilled"]}),"\n",(0,t.jsxs)(n.li,{children:["You can chain multiple ",(0,t.jsx)(n.code,{children:".then()"})," calls together"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Loading data from a server"}),"\n",(0,t.jsx)(n.li,{children:"Reading files"}),"\n",(0,t.jsx)(n.li,{children:"Processing images"}),"\n",(0,t.jsx)(n.li,{children:"Any operation that might take some time to complete"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Remember: Promises make it easier to work with asynchronous code (code that doesn't run immediately) in a more organized way."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);